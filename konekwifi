#!/bin/bash

# WiFi Connection Manager
# Script untuk mempermudah koneksi WiFi menggunakan nmcli
# Author: Your Name
# Version: 1.0

# Warna untuk output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fungsi untuk menampilkan header
show_header() {
    clear
    echo -e "${BLUE}================================================${NC}"
    echo -e "${BLUE}           WiFi Connection Manager              ${NC}"
    echo -e "${BLUE}================================================${NC}"
    echo ""
}

# Fungsi untuk menampilkan pesan dengan warna
print_message() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Fungsi untuk konfirmasi ya/tidak
confirm_action() {
    local prompt=$1
    while true; do
        echo -e "${YELLOW}${prompt} (y/n): ${NC}"
        read -r response
        case $response in
            [Yy]* ) return 0;;
            [Nn]* ) return 1;;
            * ) print_message $RED "Silakan jawab dengan y atau n.";;
        esac
    done
}

# Fungsi untuk cek status NetworkManager
check_networkmanager_status() {
    print_message $BLUE "Mengecek status NetworkManager..."
    sudo systemctl status NetworkManager --no-pager | head -10
    echo ""
    
    if systemctl is-active --quiet NetworkManager; then
        print_message $GREEN "‚úì NetworkManager sudah aktif"
        return 0
    else
        print_message $RED "‚úó NetworkManager tidak aktif"
        return 1
    fi
}

# Fungsi untuk mengaktifkan NetworkManager
enable_networkmanager() {
    print_message $BLUE "Mengaktifkan NetworkManager..."
    
    print_message $YELLOW "Menjalankan: sudo systemctl enable NetworkManager"
    sudo systemctl enable NetworkManager
    
    print_message $YELLOW "Menjalankan: sudo systemctl start NetworkManager"
    sudo systemctl start NetworkManager
    
    sleep 2
    
    if systemctl is-active --quiet NetworkManager; then
        print_message $GREEN "‚úì NetworkManager berhasil diaktifkan"
        return 0
    else
        print_message $RED "‚úó Gagal mengaktifkan NetworkManager"
        return 1
    fi
}

# Fungsi untuk menampilkan daftar WiFi
show_wifi_list() {
    print_message $BLUE "Memindai WiFi yang tersedia..."
    print_message $YELLOW "Menjalankan: nmcli device wifi rescan"
    nmcli device wifi rescan
    sleep 3
    
    print_message $BLUE "Daftar WiFi yang tersedia:"
    echo "================================================"
    nmcli device wifi list
    echo "================================================"
}

# Fungsi untuk menampilkan daftar WiFi dengan nomor untuk dipilih
show_wifi_selection() {
    print_message $BLUE "üîç Memindai WiFi yang tersedia..."
    print_message $YELLOW "Menjalankan: nmcli device wifi rescan"
    nmcli device wifi rescan
    sleep 3
    
    print_message $BLUE "üì∂ Daftar WiFi yang tersedia (diurutkan berdasarkan kekuatan sinyal):"
    echo "================================================"
    
    # Simpan daftar WiFi ke dalam array dengan format yang lebih baik
    # Gunakan nmcli dengan output yang lebih detail dan sudah diurutkan
    mapfile -t wifi_raw < <(nmcli -t -f SSID,SECURITY,SIGNAL device wifi list --rescan-ssid no | grep -v '^--' | grep -v '^$' | sort -t: -k3 -nr)
    
    if [ ${#wifi_raw[@]} -eq 0 ]; then
        print_message $RED "‚ùå Tidak ada WiFi yang ditemukan!"
        print_message $YELLOW "üí° Pastikan:"
        print_message $YELLOW "   - Adapter WiFi sudah aktif"
        print_message $YELLOW "   - Ada WiFi di sekitar Anda"
        print_message $YELLOW "   - NetworkManager berjalan dengan baik"
        return 1
    fi
    
    local index=1
    declare -g wifi_ssids=()
    declare -g wifi_securities=()
    
    printf "%-4s %-25s %-12s %-8s %s\n" "No." "SSID" "Security" "Signal" "Status"
    echo "================================================"
    
    # Array untuk mencegah duplikasi SSID
    declare -A seen_ssids
    
    for wifi_entry in "${wifi_raw[@]}"; do
        if [ -n "$wifi_entry" ]; then
            IFS=: read -r ssid security signal <<< "$wifi_entry"
            
            # Skip jika SSID kosong atau sudah ada
            if [ -n "$ssid" ] && [ "$ssid" != "--" ] && [ -z "${seen_ssids[$ssid]}" ]; then
                seen_ssids["$ssid"]=1
                wifi_ssids+=("$ssid")
                wifi_securities+=("$security")
                
                # Format security untuk tampilan yang lebih baik
                local security_display="$security"
                if [ "$security" = "--" ] || [ -z "$security" ]; then
                    security_display="Open"
                fi
                
                # Format signal strength dengan icon
                local signal_icon="üì∂"
                if [ "$signal" -gt 70 ]; then
                    signal_icon="üì∂"  # Strong signal
                elif [ "$signal" -gt 50 ]; then
                    signal_icon="üì∂"  # Medium signal  
                elif [ "$signal" -gt 30 ]; then
                    signal_icon="üì∂"  # Weak signal
                else
                    signal_icon="üì±"  # Very weak signal
                fi
                
                printf "%-4s %-25s %-12s %-8s %s\n" "$index" "$ssid" "$security_display" "$signal%" "$signal_icon"
                ((index++))
                
                # Limit maksimum 20 WiFi untuk menghindari list yang terlalu panjang
                if [ $index -gt 20 ]; then
                    break
                fi
            fi
        fi
    done
    echo "================================================"
    print_message $BLUE "üí° Ditemukan ${#wifi_ssids[@]} WiFi yang tersedia"
    
    return 0
}

# Fungsi untuk koneksi WiFi dengan sistem pemilihan nomor
connect_wifi() {
    echo ""
    
    # Tampilkan daftar WiFi untuk dipilih
    if ! show_wifi_selection; then
        return 1
    fi
    
    echo ""
    
    # Loop untuk validasi input nomor
    while true; do
        print_message $YELLOW "Pilih nomor WiFi yang ingin dihubungkan (1-${#wifi_ssids[@]}):"
        read -r choice
        
        # Validasi input
        if [[ "$choice" =~ ^[0-9]+$ ]] && [ "$choice" -ge 1 ] && [ "$choice" -le "${#wifi_ssids[@]}" ]; then
            break
        else
            print_message $RED "‚ùå Pilihan tidak valid! Masukkan nomor antara 1-${#wifi_ssids[@]}"
            echo ""
        fi
    done
    
    # Ambil SSID dan security berdasarkan pilihan
    local array_index=$((choice - 1))
    local selected_ssid="${wifi_ssids[$array_index]}"
    local selected_security="${wifi_securities[$array_index]}"
    
    print_message $GREEN "‚úì WiFi yang dipilih: $selected_ssid"
    
    # Cek apakah WiFi memerlukan password
    if [[ "$selected_security" == *"WPA"* ]] || [[ "$selected_security" == *"WEP"* ]] || [[ "$selected_security" != "--" ]]; then
        print_message $YELLOW "üîí WiFi ini memerlukan password."
        
        # Loop untuk input password
        while true; do
            print_message $YELLOW "Masukkan password WiFi:"
            read -s password
            echo ""
            
            if [ -n "$password" ]; then
                break
            else
                print_message $RED "‚ùå Password tidak boleh kosong! Silakan coba lagi."
                echo ""
            fi
        done
        
        print_message $BLUE "üîÑ Menghubungkan ke WiFi: $selected_ssid"
        print_message $YELLOW "Menjalankan: nmcli device wifi connect \"$selected_ssid\" password \"***\""
        
        if nmcli device wifi connect "$selected_ssid" password "$password" 2>/dev/null; then
            print_message $GREEN "‚úÖ Berhasil terhubung ke WiFi: $selected_ssid"
            show_connection_info
        else
            print_message $RED "‚ùå Gagal terhubung ke WiFi: $selected_ssid"
            print_message $YELLOW "üí° Kemungkinan penyebab:"
            print_message $YELLOW "   - Password salah"
            print_message $YELLOW "   - Signal terlalu lemah"
            print_message $YELLOW "   - WiFi sudah penuh"
            print_message $YELLOW "   - Masalah konfigurasi router"
            return 1
        fi
    else
        print_message $BLUE "üîÑ Menghubungkan ke WiFi terbuka: $selected_ssid"
        print_message $YELLOW "Menjalankan: nmcli device wifi connect \"$selected_ssid\""
        
        if nmcli device wifi connect "$selected_ssid" 2>/dev/null; then
            print_message $GREEN "‚úÖ Berhasil terhubung ke WiFi: $selected_ssid"
            show_connection_info
        else
            print_message $RED "‚ùå Gagal terhubung ke WiFi: $selected_ssid"
            print_message $YELLOW "üí° Kemungkinan penyebab:"
            print_message $YELLOW "   - Signal terlalu lemah"
            print_message $YELLOW "   - WiFi sudah penuh"
            print_message $YELLOW "   - Masalah konfigurasi router"
            return 1
        fi
    fi
}

# Fungsi untuk menampilkan info koneksi
show_connection_info() {
    echo ""
    print_message $BLUE "Informasi koneksi saat ini:"
    echo "================================================"
    nmcli connection show --active
    echo ""
    nmcli device status
    echo "================================================"
}

# Fungsi utama untuk koneksi WiFi
main_connect_process() {
    show_header
    
    # 1. Cek status NetworkManager
    if confirm_action "Apakah ingin melihat status NetworkManager?"; then
        if ! check_networkmanager_status; then
            if confirm_action "NetworkManager tidak aktif. Apakah ingin mengaktifkannya?"; then
                if ! enable_networkmanager; then
                    print_message $RED "Gagal mengaktifkan NetworkManager. Keluar dari program."
                    exit 1
                fi
            else
                print_message $YELLOW "NetworkManager perlu diaktifkan untuk melanjutkan."
                exit 1
            fi
        fi
    else
        # Langsung cek tanpa menampilkan status
        if ! systemctl is-active --quiet NetworkManager; then
            print_message $RED "NetworkManager tidak aktif!"
            if confirm_action "Apakah ingin mengaktifkannya?"; then
                if ! enable_networkmanager; then
                    print_message $RED "Gagal mengaktifkan NetworkManager. Keluar dari program."
                    exit 1
                fi
            else
                print_message $YELLOW "NetworkManager perlu diaktifkan untuk melanjutkan."
                exit 1
            fi
        fi
    fi
    
    echo ""
    
    # 2. Tidak perlu tampilkan daftar WiFi dulu, langsung ke koneksi
    # if confirm_action "Apakah ingin melihat daftar WiFi yang tersedia terlebih dahulu?"; then
    #     show_wifi_list
    # fi
    
    # echo ""
    
    # 3. Koneksi WiFi (dengan sistem pemilihan nomor)
    if confirm_action "Apakah ingin menghubungkan ke WiFi?"; then
        connect_wifi
    else
        print_message $YELLOW "Proses koneksi dibatalkan."
    fi
    
    echo ""
    print_message $GREEN "Proses selesai!"
}

# Fungsi untuk memutuskan koneksi WiFi
disconnect_wifi() {
    show_header
    
    # Cek apakah ada koneksi WiFi aktif
    print_message $BLUE "Mengecek koneksi WiFi saat ini..."
    
    # Metode deteksi yang lebih akurat
    # 1. Cek koneksi aktif dengan tipe wifi
    active_wifi_info=$(nmcli -t -f NAME,TYPE,DEVICE connection show --active | grep ":wifi:")
    
    # 2. Cek device WiFi yang connected
    active_device_info=$(nmcli -t -f DEVICE,TYPE,STATE,CONNECTION device status | grep "wifi:connected")
    
    # 3. Cek WiFi yang sedang terhubung dengan cara lain
    current_wifi=$(nmcli -t -f ACTIVE,SSID,SIGNAL device wifi | grep "^yes:")
    
    if [ -z "$active_wifi_info" ] && [ -z "$active_device_info" ] && [ -z "$current_wifi" ]; then
        print_message $YELLOW "Tidak ada koneksi WiFi yang aktif saat ini."
        echo ""
        print_message $BLUE "Status perangkat WiFi:"
        nmcli device status | grep wifi || print_message $YELLOW "Tidak ada perangkat WiFi yang terdeteksi"
        echo ""
        print_message $BLUE "Semua koneksi aktif:"
        nmcli connection show --active
        return 0
    fi
    
    print_message $BLUE "Koneksi WiFi aktif saat ini:"
    echo "================================================"
    
    # Tampilkan informasi detail koneksi aktif
    if [ -n "$active_wifi_info" ]; then
        echo "KONEKSI AKTIF:"
        while IFS=: read -r name type device; do
            print_message $GREEN "- Nama Koneksi: $name"
            print_message $GREEN "- Perangkat: $device"
            print_message $GREEN "- Tipe: $type"
            
            # Ambil informasi tambahan seperti IP dan SSID
            connection_details=$(nmcli connection show "$name" 2>/dev/null | grep -E "(IP4.ADDRESS|802-11-wireless.ssid|ipv4.addresses)")
            if [ -n "$connection_details" ]; then
                echo "$connection_details" | while read -r line; do
                    print_message $BLUE "  $line"
                done
            fi
            echo ""
        done <<< "$active_wifi_info"
    fi
    
    # Tampilkan informasi WiFi yang sedang terhubung
    if [ -n "$current_wifi" ]; then
        echo "DETAIL WIFI AKTIF:"
        while IFS=: read -r active ssid signal rest; do
            print_message $GREEN "- SSID: $ssid"
            print_message $GREEN "- Kekuatan Signal: $signal%"
        done <<< "$current_wifi"
        echo ""
    fi
    
    # Tampilkan status perangkat WiFi
    if [ -n "$active_device_info" ]; then
        echo "STATUS PERANGKAT WiFi:"
        while IFS=: read -r device type state connection; do
            print_message $BLUE "- Perangkat: $device ($type)"
            print_message $BLUE "- Status: $state"
            print_message $BLUE "- Koneksi: $connection"
        done <<< "$active_device_info"
    fi
    
    echo "================================================"
    
    if confirm_action "Apakah ingin memutuskan semua koneksi WiFi?"; then
        print_message $BLUE "Memutuskan koneksi WiFi..."
        
        # Metode yang lebih baik untuk memutuskan koneksi
        if [ -n "$active_wifi_info" ]; then
            while IFS=: read -r name type device; do
                print_message $YELLOW "Menjalankan: nmcli connection down \"$name\""
                nmcli connection down "$name"
            done <<< "$active_wifi_info"
        fi
        
        # Alternatif dengan mematikan dan menyalakan WiFi
        print_message $YELLOW "Menjalankan: nmcli radio wifi off"
        nmcli radio wifi off
        sleep 2
        
        print_message $YELLOW "Menjalankan: nmcli radio wifi on"
        nmcli radio wifi on
        sleep 2
        
        print_message $GREEN "‚úì Koneksi WiFi telah diputuskan"
    fi
    
    echo ""
    
    if confirm_action "Apakah ingin menghapus profil WiFi yang tersimpan?"; then
        show_saved_connections
    fi
}

# Fungsi untuk menampilkan dan menghapus koneksi tersimpan
show_saved_connections() {
    print_message $BLUE "Profil WiFi yang tersimpan:"
    echo "================================================"
    
    saved_wifi=$(nmcli -t -f NAME,TYPE connection show | grep wifi)
    
    if [ -z "$saved_wifi" ]; then
        print_message $YELLOW "Tidak ada profil WiFi yang tersimpan."
        return 0
    fi
    
    echo "$saved_wifi" | while IFS=: read -r name type; do
        echo "- $name"
    done
    echo "================================================"
    
    if confirm_action "Apakah ingin menghapus profil WiFi tertentu?"; then
        delete_wifi_profile
    fi
}

# Fungsi untuk menghapus profil WiFi
delete_wifi_profile() {
    echo ""
    print_message $YELLOW "Masukkan nama profil WiFi yang ingin dihapus:"
    read -r profile_name
    
    if [ -z "$profile_name" ]; then
        print_message $RED "Nama profil tidak boleh kosong!"
        return 1
    fi
    
    # Cek apakah profil ada
    if nmcli connection show "$profile_name" &>/dev/null; then
        print_message $BLUE "Menghapus profil WiFi: $profile_name"
        print_message $YELLOW "Menjalankan: nmcli connection delete \"$profile_name\""
        
        if nmcli connection delete "$profile_name"; then
            print_message $GREEN "‚úì Profil WiFi '$profile_name' berhasil dihapus"
        else
            print_message $RED "‚úó Gagal menghapus profil WiFi '$profile_name'"
        fi
    else
        print_message $RED "Profil WiFi '$profile_name' tidak ditemukan!"
        print_message $YELLOW "Gunakan nama profil yang tepat sesuai daftar di atas."
    fi
}

# Fungsi untuk menampilkan bantuan
show_help() {
    show_header
    print_message $BLUE "Panduan Penggunaan WiFi Connection Manager"
    echo ""
    echo "PERINTAH YANG TERSEDIA:"
    echo "  konekwifi        - Proses lengkap koneksi WiFi"
    echo "  putuswifi        - Memutuskan koneksi dan mengelola profil WiFi"
    echo "  konekwifi --help - Menampilkan bantuan ini"
    echo ""
    echo "ALUR PROSES KONEKWIFI:"
    echo "  1. Cek status NetworkManager"
    echo "  2. Aktifkan NetworkManager (jika diperlukan)"
    echo "  3. Tampilkan daftar WiFi tersedia"
    echo "  4. Koneksi ke WiFi yang dipilih"
    echo ""
    echo "ALUR PROSES PUTUSWIFI:"
    echo "  1. Tampilkan koneksi WiFi aktif"
    echo "  2. Putuskan koneksi WiFi"
    echo "  3. Kelola profil WiFi tersimpan"
    echo ""
    echo "PERSYARATAN:"
    echo "  - nmcli (Network Manager Command Line)"
    echo "  - sudo privileges untuk mengelola NetworkManager"
    echo ""
}

# Main script logic
case "${1:-}" in
    --help|-h)
        show_help
        ;;
    *)
        # Deteksi nama script untuk menentukan fungsi
        script_name=$(basename "$0")
        case "$script_name" in
            "putuswifi")
                disconnect_wifi
                ;;
            "konekwifi"|*)
                main_connect_process
                ;;
        esac
        ;;
esac
